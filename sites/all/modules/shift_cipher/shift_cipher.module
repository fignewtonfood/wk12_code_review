<?php
function shift_cipher_menu(){
    $items = array();
    $items['shift_cipher'] = array (
        'title' => 'Shift Cipher',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('shift_cipher_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['shift_cipher_success_page'] = array (
        'title' => 'Results',
        'page callback' => 'shift_cipher_success',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function shift_cipher_form() {
    $form['shift_value'] = array(
        '#title' => 'Shift Value',
        '#type' => 'textfield',
        '#description' => t("How many spaces would you like to shift? (1-25)"),
        '#element_validate' => array('element_validate_integer_positive', 'element_validate_range'),
        '#required' => TRUE,
    );
    $form['shift_direction'] = array(
        '#title' => 'Shift Direction',
        '#type' => 'textfield',
        '#description' => t("What direction would you like to shift in?"),
        '#element_validate' => array('element_validate_alpha_range'),
        '#required' => TRUE,
    );
    $form['cipher_phrase'] = array(
        '#title' => 'Word or Phrase to Cipher',
        '#type' => 'textfield',
        '#description' => t("What word or phrase would you like to cipher?"),
        '#required' => TRUE,
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Go',
    );
    return $form;
}

function element_validate_range($element) {
    if ($element['#value'] < 1 || $element['#value'] > 25) {
        form_error($element, t('Value must be number between 1-25'));
    }
}

function element_validate_alpha_range($element) {
    if (!in_array($element['#value'], array('left', 'Left', 'LEFT', 'right', 'Right', 'RIGHT'))) {
        form_error($element, t('Direction must be either left or right'));
    }
}

function shift_cipher_form_validate($form, &$form_state) {
    $pattern = '/[^A-Za-z0-9^\'^\:^\,^\-^\!^\(^\)^\.^\?^\"^\;\s]/';
    $cipher_check = $form_state['values']['cipher_phrase'];
    // drupal_set_message(sprintf('<pre>%s</pre>', print_r($pattern, TRUE)));
    if (preg_match_all($pattern, $cipher_check)) {
        form_set_error('cipher_phrase', 'Invalid character detected!');
    }
}

function shift_cipher_form_submit($form, &$form_state) {
    $reference = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
    $spaces_to_shift = $form_state['values']['shift_value'];
    $direction_to_shift = $form_state['values']['shift_direction'];
    $phrase_to_cipher = $form_state['values']['cipher_phrase'];
    $lower_phrase = strtolower($phrase_to_cipher);
    $split_phrase = str_split($lower_phrase);
    $output = '';
    if (in_array($direction_to_shift, array('left', 'Left', 'LEFT'))) {
        $direction_bit = -1;
    } else {
        $direction_bit = 1;
    }
    foreach ($split_phrase as $character) {
        if (in_array($character, $reference)) {
            $key = array_search($character, $reference);
            $new_key = ($spaces_to_shift * $direction_bit) + $key;
            if ($new_key < 0) {
                $new_key += 26;
            } elseif ($new_key > 25) {
                $new_key -= 26;
            }
            $output .= $reference[$new_key];
        } else {
            $output .= $character;
        }
    }
    // if ($queen_rank_coordinates == $target_rank_coordinates) {
    //     $check_output = "Can attack vertically!";
    // //checks horizontal position
    // } elseif ($queen_file_coordinates == $target_file_coordinates) {
    //     $check_output = "Can attack horizontally!";
    // //checks if diagonal
    // } elseif (abs($queen_rank_coordinates- $target_rank_coordinates) == abs($queen_file_coordinates-$target_file_coordinates)) {
    //     $check_output = "Can attack diagonally!";
    // } else {
    //     $check_output = "No attacks!";
    // }
    //sets the local session value to the output from all the business logic
    $_SESSION['shift_cipher_output'] = $output;
    $form_state['redirect'] = 'shift_cipher_success_page';
}

function shift_cipher_success() {
    return '<p>'.$_SESSION['shift_cipher_output'].'</p>';
}
